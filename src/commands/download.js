// src/commands/download.js
const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const PluginManager = require('../utils/plugins');
const DownloadManager = require('../utils/downloads');
const PermissionManager = require('../utils/permissions');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('download')
        .setDescription('T·∫°o link t·∫£i plugin')
        .addIntegerOption(option =>
            option.setName('plugin_id')
                .setDescription('ID c·ªßa plugin c·∫ßn t·∫°o link t·∫£i')
                .setRequired(true))
        .addIntegerOption(option =>
            option.setName('max_downloads')
                .setDescription('S·ªë l·∫ßn t·∫£i t·ªëi ƒëa (m·∫∑c ƒë·ªãnh: 10)')
                .setRequired(false))
        .addStringOption(option =>
            option.setName('allowed_ips')
                .setDescription('Danh s√°ch IP ƒë∆∞·ª£c ph√©p (c√°ch nhau b·ªüi d·∫•u ph·∫©y)')
                .setRequired(false))
        .addIntegerOption(option =>
            option.setName('expires_hours')
                .setDescription('S·ªë gi·ªù h·∫øt h·∫°n (m·∫∑c ƒë·ªãnh: 24)')
                .setRequired(false)),

    async execute(interaction) {
        const isAuthorized = await PermissionManager.isAuthorized(interaction.user.id);
        
        if (!isAuthorized) {
            const embed = new EmbedBuilder()
                .setColor('#ff0000')
                .setTitle('‚ùå Kh√¥ng c√≥ quy·ªÅn')
                .setDescription('B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o link t·∫£i!')
                .setTimestamp();
            
            return interaction.reply({ embeds: [embed], ephemeral: true });
        }

        const pluginId = interaction.options.getInteger('plugin_id');
        const maxDownloads = interaction.options.getInteger('max_downloads') || 10;
        const allowedIps = interaction.options.getString('allowed_ips');
        const expiresHours = interaction.options.getInteger('expires_hours') || 24;

        try {
            // Check if plugin exists
            const plugin = await PluginManager.getPluginById(pluginId);
            
            if (!plugin) {
                const embed = new EmbedBuilder()
                    .setColor('#ff0000')
                    .setTitle('‚ùå Kh√¥ng t√¨m th·∫•y')
                    .setDescription(`Kh√¥ng t√¨m th·∫•y plugin v·ªõi ID: ${pluginId}`)
                    .setTimestamp();
                
                return interaction.reply({ embeds: [embed], ephemeral: true });
            }

            // Create download link
            const linkId = await DownloadManager.createDownloadLink(
                pluginId,
                maxDownloads,
                allowedIps,
                interaction.user.id,
                expiresHours
            );

            const downloadUrl = `http://localhost:3000/download/${linkId}`;

            const embed = new EmbedBuilder()
                .setColor('#00ff00')
                .setTitle('‚úÖ Link t·∫£i ƒë√£ t·∫°o!')
                .setDescription(`Link t·∫£i cho plugin **${plugin.name}** ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!`)
                .addFields(
                    { name: 'üîó Link t·∫£i', value: `[T·∫£i xu·ªëng](${downloadUrl})`, inline: false },
                    { name: 'üìÅ Plugin', value: plugin.full_name, inline: true },
                    { name: 'üè∑Ô∏è Phi√™n b·∫£n', value: plugin.version, inline: true },
                    { name: 'üì• L∆∞·ª£t t·∫£i t·ªëi ƒëa', value: maxDownloads.toString(), inline: true },
                    { name: 'üïí H·∫øt h·∫°n sau', value: `${expiresHours} gi·ªù`, inline: true },
                    { name: 'üåê IP ƒë∆∞·ª£c ph√©p', value: allowedIps || 'T·∫•t c·∫£', inline: true },
                    { name: 'üë§ T·∫°o b·ªüi', value: `<@${interaction.user.id}>`, inline: true }
                )
                .setFooter({ text: `Link ID: ${linkId}` })
                .setTimestamp();

            await interaction.reply({ embeds: [embed], ephemeral: true });
        } catch (error) {
            console.error('L·ªói khi t·∫°o link t·∫£i:', error);
            
            const embed = new EmbedBuilder()
                .setColor('#ff0000')
                .setTitle('‚ùå L·ªói')
                .setDescription('C√≥ l·ªói x·∫£y ra khi t·∫°o link t·∫£i!')
                .setTimestamp();
            
            await interaction.reply({ embeds: [embed], ephemeral: true });
        }
    },
};
